datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Skill {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  lessons     Lesson[]
  attachments Attachment[]
  purchases   Purchase[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  skills Skill[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([skillId])
}

model Lesson {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([skillId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  lessonId String @unique
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, skillId])
  @@index([skillId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
